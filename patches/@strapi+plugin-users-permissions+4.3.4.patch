diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
index 19c0c48..3960e50 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
@@ -288,10 +288,15 @@ module.exports = {
     };
 
     await validateRegisterBody(params);
+    let role;
 
-    const role = await strapi
+    if (!params.organisations) {
+      role = await strapi
       .query('plugin::users-permissions.role')
       .findOne({ where: { type: settings.default_role } });
+    } else {
+      role = params.role;
+    }
 
     if (!role) {
       throw new ApplicationError('Impossible to find the default role');
diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/content-manager-user.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/content-manager-user.js
index 63a0315..96806c2 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/content-manager-user.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/content-manager-user.js
@@ -112,6 +112,7 @@ module.exports = {
       const sanitizedData = await pm.sanitizeOutput(data, { action: ACTIONS.read });
 
       ctx.created(sanitizedData);
+
     } catch (error) {
       throw new ApplicationError(error.message);
     }
diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/role.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/role.js
index a31c86f..387a999 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/role.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/role.js
@@ -34,9 +34,11 @@ module.exports = {
   },
 
   async find(ctx) {
+    const userState = ctx.state.user;
     const roles = await getService('role').find();
+    const newRoles = await roles.filter(role => role.type !== 'authenticated' && role.type !== 'public');
 
-    ctx.send({ roles });
+    ctx.send({ roles: (userState?.roles[0]?.code === 'strapi-super-admin') ? roles : newRoles });
   },
 
   async updateRole(ctx) {
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/role.js b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
index 66cacec..07df012 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/role.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
@@ -2,7 +2,7 @@
 
 const _ = require('lodash');
 const { NotFoundError } = require('@strapi/utils').errors;
-const { getService } = require('../utils');
+const { getService, removeFields } = require('../utils');
 
 module.exports = ({ strapi }) => ({
   async createRole(params) {
@@ -77,7 +77,7 @@ module.exports = ({ strapi }) => ({
         .count({ where: { role: { id: role.id } } });
     }
 
-    return roles;
+    return removeFields(roles, ['createdAt', 'updatedAt']);
   },
 
   async updateRole(roleID, data) {
diff --git a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
index 1287a45..46eb96e 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
@@ -1,12 +1,27 @@
 'use strict';
 
 const sanitize = require('./sanitize');
+const _ = require('lodash');
 
 const getService = name => {
   return strapi.plugin('users-permissions').service(name);
 };
 
+const removeFields = (entity, fields) => {
+  let objectEntries = [];
+
+  Object.entries(entity).forEach(entry => {
+    const [ key, value ] = entry;
+    const sanitizedValue = _.omit(value, fields);
+    objectEntries.push(sanitizedValue);
+  });
+
+
+  return objectEntries;
+};
+
 module.exports = {
   getService,
   sanitize,
+  removeFields
 };
