diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/role.js b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
index 66cacec..d094ec9 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/role.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
@@ -2,7 +2,7 @@
 
 const _ = require('lodash');
 const { NotFoundError } = require('@strapi/utils').errors;
-const { getService } = require('../utils');
+const { getService, removeFields } = require('../utils');
 
 module.exports = ({ strapi }) => ({
   async createRole(params) {
@@ -71,13 +71,14 @@ module.exports = ({ strapi }) => ({
   async find() {
     const roles = await strapi.query('plugin::users-permissions.role').findMany({ sort: ['name'] });
 
-    for (const role of roles) {
-      role.nb_users = await strapi
-        .query('plugin::users-permissions.user')
-        .count({ where: { role: { id: role.id } } });
-    }
+    // for (const role of roles) {
+    //   role.nb_users = await strapi
+    //     .query('plugin::users-permissions.user')
+    //     .count({ where: { role: { id: role.id } } });
+    // }
 
-    return roles;
+   const newRoles = await roles.filter(role => role.type !== 'authenticated' && role.type !== 'public');
+    return removeFields(newRoles, ['createdAt', 'updatedAt']);
   },
 
   async updateRole(roleID, data) {
diff --git a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
index 1287a45..394b471 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
@@ -1,12 +1,28 @@
 'use strict';
 
 const sanitize = require('./sanitize');
+const _ = require('lodash');
 
 const getService = name => {
   return strapi.plugin('users-permissions').service(name);
 };
 
+const removeFields = (entity, fields) => {
+  const sanitizedValue = _.omit(entity, fields);
+
+  _.forEach(sanitizedValue, (value, key) => {
+    if (_.isArray(value)) {
+      sanitizedValue[key] = value.map(removeFields);
+    } else if (_.isObject(value)) {
+      sanitizedValue[key] = removeFields(value);
+    }
+  });
+
+  return sanitizedValue;
+};
+
 module.exports = {
   getService,
   sanitize,
+  removeFields
 };
