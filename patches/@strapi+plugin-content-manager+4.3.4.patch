diff --git a/node_modules/@strapi/plugin-content-manager/server/controllers/collection-types.js b/node_modules/@strapi/plugin-content-manager/server/controllers/collection-types.js
index 3863773..7fd37fa 100644
--- a/node_modules/@strapi/plugin-content-manager/server/controllers/collection-types.js
+++ b/node_modules/@strapi/plugin-content-manager/server/controllers/collection-types.js
@@ -5,7 +5,9 @@ const { MANY_RELATIONS } = require('@strapi/utils').relations.constants;
 const { setCreatorFields, pipeAsync } = require('@strapi/utils');
 
 const { getService, pickWritableAttributes } = require('../utils');
-const { validateBulkDeleteInput, validatePagination } = require('./validation');
+const { validateBulkDeleteInput, 
+        validatePagination
+      } = require('./validation');
 
 module.exports = {
   async find(ctx) {
@@ -27,8 +29,16 @@ module.exports = {
       model
     );
 
+    const url = ctx.request.url;
+    const collection = url.split('/')[3];
+    let members = results;
+
+    if ((collection.split('?')[0] === 'plugin::users-permissions.user') && (ctx.state.user.roles[0].code !== 'strapi-super-admin')) {
+      members = results.filter((result) => result.organisations.aliasId === ctx.state.user.roles[0].name);
+    }
+
     const sanitizedResults = await Promise.all(
-      results.map(result => permissionChecker.sanitizeOutput(result))
+      members.map(result => permissionChecker.sanitizeOutput(result))
     );
 
     ctx.body = {
diff --git a/node_modules/@strapi/plugin-content-manager/server/controllers/relations.js b/node_modules/@strapi/plugin-content-manager/server/controllers/relations.js
index 35dda67..a479734 100644
--- a/node_modules/@strapi/plugin-content-manager/server/controllers/relations.js
+++ b/node_modules/@strapi/plugin-content-manager/server/controllers/relations.js
@@ -46,12 +46,25 @@ module.exports = {
 
     const entityManager = getService('entity-manager');
 
-    const entities = await entityManager.find(query, target.uid, []);
+    let entities = await entityManager.find(query, target.uid, []);
+    const admin = ctx.state.user;
 
     if (!entities) {
       return ctx.notFound();
     }
 
+    /* Start custom validation for Journey relation fields */
+    if (targetField === 'role' && admin.roles[0].code !== 'strapi-super-admin') {
+      const filteredEntities = entities.filter(role => role.type !== 'authenticated' && role.type !== 'public');
+      entities = filteredEntities.filter(entity => entity.name.includes(admin.roles[0].name));
+    }
+
+    if (targetField === 'organisations' && admin.roles[0].code !== 'strapi-super-admin') {
+      entities = entities.filter(entity => entity.name.includes(admin.roles[0].name));
+    }
+
+    /* End custom validation for Journey relation fields */
+
     const modelConfig = _component
       ? await getService('components').findConfiguration(modelDef)
       : await getService('content-types').findConfiguration(modelDef);
diff --git a/node_modules/@strapi/plugin-content-manager/server/controllers/validation/index.js b/node_modules/@strapi/plugin-content-manager/server/controllers/validation/index.js
index c3c8a82..1ace7d4 100644
--- a/node_modules/@strapi/plugin-content-manager/server/controllers/validation/index.js
+++ b/node_modules/@strapi/plugin-content-manager/server/controllers/validation/index.js
@@ -75,5 +75,5 @@ module.exports = {
   validateGenerateUIDInput: validateYupSchema(generateUIDInputSchema),
   validateCheckUIDAvailabilityInput: validateYupSchema(checkUIDAvailabilityInputSchema),
   validateUIDField,
-  validatePagination,
+  validatePagination
 };
