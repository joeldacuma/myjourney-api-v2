diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/role.js b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
index 66cacec..07df012 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/role.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/role.js
@@ -2,7 +2,7 @@
 
 const _ = require('lodash');
 const { NotFoundError } = require('@strapi/utils').errors;
-const { getService } = require('../utils');
+const { getService, removeFields } = require('../utils');
 
 module.exports = ({ strapi }) => ({
   async createRole(params) {
@@ -77,7 +77,7 @@ module.exports = ({ strapi }) => ({
         .count({ where: { role: { id: role.id } } });
     }
 
-    return roles;
+    return removeFields(roles, ['createdAt', 'updatedAt']);
   },
 
   async updateRole(roleID, data) {
diff --git a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
index 1287a45..46eb96e 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/utils/index.js
@@ -1,12 +1,27 @@
 'use strict';
 
 const sanitize = require('./sanitize');
+const _ = require('lodash');
 
 const getService = name => {
   return strapi.plugin('users-permissions').service(name);
 };
 
+const removeFields = (entity, fields) => {
+  let objectEntries = [];
+
+  Object.entries(entity).forEach(entry => {
+    const [ key, value ] = entry;
+    const sanitizedValue = _.omit(value, fields);
+    objectEntries.push(sanitizedValue);
+  });
+
+
+  return objectEntries;
+};
+
 module.exports = {
   getService,
   sanitize,
+  removeFields
 };
